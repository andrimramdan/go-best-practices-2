// This file was generated by counterfeiter
package usecasesfakes

import (
	"sync"

	"github.com/tjarratt/go-best-practices/usecases"
)

type FakeOrderPizzaUseCase struct {
	ExecuteStub        func(usecases.OrderPizzaRequest) (usecases.PizzaResponse, error)
	executeMutex       sync.RWMutex
	executeArgsForCall []struct {
		arg1 usecases.OrderPizzaRequest
	}
	executeReturns struct {
		result1 usecases.PizzaResponse
		result2 error
	}
}

func (fake *FakeOrderPizzaUseCase) Execute(arg1 usecases.OrderPizzaRequest) (usecases.PizzaResponse, error) {
	fake.executeMutex.Lock()
	fake.executeArgsForCall = append(fake.executeArgsForCall, struct {
		arg1 usecases.OrderPizzaRequest
	}{arg1})
	fake.executeMutex.Unlock()
	if fake.ExecuteStub != nil {
		return fake.ExecuteStub(arg1)
	} else {
		return fake.executeReturns.result1, fake.executeReturns.result2
	}
}

func (fake *FakeOrderPizzaUseCase) ExecuteCallCount() int {
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	return len(fake.executeArgsForCall)
}

func (fake *FakeOrderPizzaUseCase) ExecuteArgsForCall(i int) usecases.OrderPizzaRequest {
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	return fake.executeArgsForCall[i].arg1
}

func (fake *FakeOrderPizzaUseCase) ExecuteReturns(result1 usecases.PizzaResponse, result2 error) {
	fake.ExecuteStub = nil
	fake.executeReturns = struct {
		result1 usecases.PizzaResponse
		result2 error
	}{result1, result2}
}

var _ usecases.OrderPizzaUseCase = new(FakeOrderPizzaUseCase)
