// This file was generated by counterfeiter
package httpserverfakes

import (
	"net/http"
	"sync"

	"github.com/tjarratt/go-best-practices/httpserver"
)

type FakeMiddlewareWrapper struct {
	AddMiddlewareToHandlerStub        func(http.Handler) http.Handler
	addMiddlewareToHandlerMutex       sync.RWMutex
	addMiddlewareToHandlerArgsForCall []struct {
		arg1 http.Handler
	}
	addMiddlewareToHandlerReturns struct {
		result1 http.Handler
	}
}

func (fake *FakeMiddlewareWrapper) AddMiddlewareToHandler(arg1 http.Handler) http.Handler {
	fake.addMiddlewareToHandlerMutex.Lock()
	fake.addMiddlewareToHandlerArgsForCall = append(fake.addMiddlewareToHandlerArgsForCall, struct {
		arg1 http.Handler
	}{arg1})
	fake.addMiddlewareToHandlerMutex.Unlock()
	if fake.AddMiddlewareToHandlerStub != nil {
		return fake.AddMiddlewareToHandlerStub(arg1)
	} else {
		return fake.addMiddlewareToHandlerReturns.result1
	}
}

func (fake *FakeMiddlewareWrapper) AddMiddlewareToHandlerCallCount() int {
	fake.addMiddlewareToHandlerMutex.RLock()
	defer fake.addMiddlewareToHandlerMutex.RUnlock()
	return len(fake.addMiddlewareToHandlerArgsForCall)
}

func (fake *FakeMiddlewareWrapper) AddMiddlewareToHandlerArgsForCall(i int) http.Handler {
	fake.addMiddlewareToHandlerMutex.RLock()
	defer fake.addMiddlewareToHandlerMutex.RUnlock()
	return fake.addMiddlewareToHandlerArgsForCall[i].arg1
}

func (fake *FakeMiddlewareWrapper) AddMiddlewareToHandlerReturns(result1 http.Handler) {
	fake.AddMiddlewareToHandlerStub = nil
	fake.addMiddlewareToHandlerReturns = struct {
		result1 http.Handler
	}{result1}
}

var _ httpserver.MiddlewareWrapper = new(FakeMiddlewareWrapper)
