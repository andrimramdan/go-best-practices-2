// This file was generated by counterfeiter
package httpserverfakes

import (
	"net/http"
	"sync"

	"github.com/tjarratt/go-best-practices/httpserver"
)

type FakeOrderPizzaParamReader struct {
	ReadParamsFromRequestStub        func(*http.Request) (httpserver.OrderPizzaParams, error)
	readParamsFromRequestMutex       sync.RWMutex
	readParamsFromRequestArgsForCall []struct {
		arg1 *http.Request
	}
	readParamsFromRequestReturns struct {
		result1 httpserver.OrderPizzaParams
		result2 error
	}
}

func (fake *FakeOrderPizzaParamReader) ReadParamsFromRequest(arg1 *http.Request) (httpserver.OrderPizzaParams, error) {
	fake.readParamsFromRequestMutex.Lock()
	fake.readParamsFromRequestArgsForCall = append(fake.readParamsFromRequestArgsForCall, struct {
		arg1 *http.Request
	}{arg1})
	fake.readParamsFromRequestMutex.Unlock()
	if fake.ReadParamsFromRequestStub != nil {
		return fake.ReadParamsFromRequestStub(arg1)
	} else {
		return fake.readParamsFromRequestReturns.result1, fake.readParamsFromRequestReturns.result2
	}
}

func (fake *FakeOrderPizzaParamReader) ReadParamsFromRequestCallCount() int {
	fake.readParamsFromRequestMutex.RLock()
	defer fake.readParamsFromRequestMutex.RUnlock()
	return len(fake.readParamsFromRequestArgsForCall)
}

func (fake *FakeOrderPizzaParamReader) ReadParamsFromRequestArgsForCall(i int) *http.Request {
	fake.readParamsFromRequestMutex.RLock()
	defer fake.readParamsFromRequestMutex.RUnlock()
	return fake.readParamsFromRequestArgsForCall[i].arg1
}

func (fake *FakeOrderPizzaParamReader) ReadParamsFromRequestReturns(result1 httpserver.OrderPizzaParams, result2 error) {
	fake.ReadParamsFromRequestStub = nil
	fake.readParamsFromRequestReturns = struct {
		result1 httpserver.OrderPizzaParams
		result2 error
	}{result1, result2}
}

var _ httpserver.OrderPizzaParamReader = new(FakeOrderPizzaParamReader)
